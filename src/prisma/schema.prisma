generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  role          Roles         @default(user)
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
  reviews       Review[]
  transactions  Transaction[]
  cart          Cart? // Relaci√≥n uno a uno con Cart
}

model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  price        Float
  description  String
  image        String
  discount     Float
  rating       Float
  quantity     Int
  disabled     Boolean       @default(false)
  category     String // Agregamos el campo "category" de tipo String
  console      String? // Agregamos el campo "console" de tipo String opcional
  favorites    Favorite[]
  reviews      Review[]
  transactions Transaction[]
  cartItems    CartItem[]
}

model Favorite {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id         Int     @id @default(autoincrement())
  productId  Int
  commentary String
  rating     Float
  userId     Int
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Transaction {
  id       Int       @id @default(autoincrement())
  userId   Int
  approved Boolean   @default(false)
  cost     Float
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
}

enum Roles {
  user
  admin
  employed
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
